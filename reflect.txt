/*
*****************************************************************************
                        Assignment 1 - Milestone 3
Full Name  : Sukhad Adhikari
Student ID#: 15651219
Email      : sadhikari28@myseneca.ca
Section    : ZBB
Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/

1. The three functions that I created for this Milestone are
i. void sort(struct Appointment* appointment, int max);
The main purpose of this function is to sort all the records/items of the files in ascending order. This function passes two parameters(appointment of user-defined Appointment data type (struct Appointment* appointment) and the maximum number of appointments mentioned as (int max). This function does not have any return value as it starts with a void. It will just get the data and do sorting for the given data. In my Milestone 3, I use this function in  (viewAllAppointments()) function to sort all my appointment records in assencding order. I call this function in my workshop as sort(data->appointments, data->maxAppointments). I am passing all the appointments record of my appointmentData file and the maximum number of appointments. 
ii.  int slotcheck(struct Appointment* appoint, int max, int tempyear, int tempMonth, int tempDay, int tempHour, int tempMin); 
This function checks whether the appointment is in the appointment records or not. The function is a return type function as it has an int at the beginning. The function have seven parameters. I use this function in add appointment function of this milestone. The function accepts user defined Appointment data type argument and six other integer values. In this milestone, I use this function to examine whether the appointment slot is booked or not. I am passing all the details of date and time to this function, it will return the index if the appointment slot is already booked, while if it isnot booked yet, then it will return zero. 
iii.  iii. int appointmentCheck(struct Appointment* appoint, int max, int patNum);
This function is a return-type function and has three parameters. The purpose of this function is to check whether the patient number is on the appointment list or not. It will return either -1 if the provided patNum is not in the appointment list while if the patient number is in the appointment list it will return the line number where the patient number exists. I use this function in the remove patient function to check whether the user-provided patient number is in the appointment list or not. 

2.  I used a lot of functions that I wrote in core.c and clinic.c in my appointment function. The purpose of this function is to add a new appointment to the appointData.txt file. I wrote like 105 lines of code in this function. The very first function that I used in this function is inputIntPositive() which prompts for the validation positive number(iterate till the positive value is entered).  By a single function, I save more than 20-25 lines of code. Similarly, other functions inputIntRange(validate for the positive number and iterate till the entered value is positive or not of the range as specified in function parameters), and the function slotcheck (receives user-defined appointment type and the year, month, day, hour and minute). This function will return one if the provided dates and time is in that appointment list, it will return zero if the provided date and time are not in that appointment list. It makes me easier to manage my program. From the first few functions, I don't have to repeat the same line of code, again and again, to get the input and validate and all. By using all the functions, I don't have to stack all my code altogether in the same addappointment function. 

3.This development of this  Milestone for me is like a roller coaster. Somewhere, I struggled a lot, spending hours, getting memory stacks errors during the development of the program. We got seven days for this Milestone 3. I submitted my last Milestone on the due date, so I started reviewing this Milestone file from last Friday. The approach for this milestone is different than any other milestone and projects that we did. We used to get all the stacks of instructions to write code as well as a predefined function prototype but in this milestone, we have to develop the code by ourselves without step-by-step instruction, just by reviewing the output to get the job done. The maximum error I got during the development of this program is memory error, I used to have different data type arguments and different data type parameters of the function. I stuck more in sorting. I was done with the first function(viewAllAppointments), this was straightforward, and I was enjoying it at first because we are getting to use whatever we want to get the job done. But, I stuck a lot in sorting, I was trying to swap directly to the appointments by comparing directly all the years, months, days, hours, and minutes. That approach didn't work so researched more about swapping and found a way after struggling for more than six-seven hours. I also struggled a lot with add appointments function too, it is the most difficult function that I found to develop from this milestone. I have to call different functions that I wrote for my previous milestone, so it was kind of tiring. I made my program on Wednesday and I was trying to check on the matrix as the matrix shows a lot of warnings and errors while compilation but visual studio ignores that. When I compiled it for the first time I got like 20 different errors from my file.  I felt like I am done, I can't submit this in time within the due date. I tried to figure out why I was getting these errors did white box testing, breaking into simplest problems, and got the job done.  